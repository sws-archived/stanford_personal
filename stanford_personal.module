<?php
/**
 * @file
 * Code for the Stanford Sites Jumpstart module.
 */
/**
 * Implements hook_menu().
 */
function stanford_personal_menu() {
  $items['admin/stanford-personal'] = array(
    'title' => 'Stanford Sites Personal Help',
    'page callback' => 'theme',
    'page arguments' => array('gethelp_template'),
    'access arguments' => array('access stanford personal help'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/stanford-personal/help'] = array(
    'title' => 'Get Help',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -11,
  );
  $items['admin/stanford-personal/profile'] = array(
    'title' => 'Manage Profile',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_personal_profile_form'),
    'access arguments' => array('access stanford personal help'),
    'weight' => -10,
  );
  $items['admin/stanford-personal/pages'] = array(
    'title' => 'Manage Pages',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Manage Pages on your Stanford Site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_personal_manage_pages_form'),
    'access arguments' => array('stanford personal manage pages'),
    'weight' => -9,
  );
  $items['admin/stanford-personal/blocks'] = array(
    'title' => 'Manage Blocks',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_personal_blocks_form'),
    'access arguments' => array('access stanford personal help'),
    'weight' => -8,
  );
  $items['admin/stanford-personal/design'] = array(
    'title' => 'Customize Design',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_personal_design_form'),
    'access arguments' => array('access stanford personal help'),
    'weight' => -7,
  );
  $items['admin/stanford-personal/site-settings'] = array(
    'title' => 'Change Site Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_personal_site_details_form'),
    'access arguments' => array('access stanford personal help'),
    'weight' => -6,
  );
  $items['admin/stanford-personal/site-settings/site-details'] = array(
    'title' => 'Site Details',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_personal_site_details_form'),
    'access arguments' => array('access stanford personal help'),
    'weight' => -10,
  );
  $items['admin/stanford-personal/site-settings/advanced'] = array(
    'title' => 'Advanced Mode',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('stanford_personal_site_settings_advanced_form'),
    'access arguments' => array('access stanford personal help'),
    'weight' => -8,
  );
  $items['admin/stanford-personal/site-settings/site-editors'] = array(
    'title' => 'Site Editors',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_personal_site_editors_form'),
    'access arguments' => array('access stanford personal help'),
    'weight' => -9,
  );
  return $items;
}

/**
 * Page callback for admin/stanford-personal/help.
 */
function stanford_personal_theme($existing, $type, $theme, $path) {
  // Set the default help templates

  return array(
    'gethelp_template' => array(
      'template' => 'templates/gethelp',
    ),
    'stanford_personal_manage_pages_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function stanford_personal_permission() {
  return array(
    'access stanford personal help' => array(
      'title' => t('Access Stanford Sites Personal Help'),
      'description' => t('View the Stanford Sites Personal Help pages, launch checklist and instructions'),
    ),
    'stanford personal use full block' => array(
      'title' => t('Use Full Block Interface'),
      'description' => t('View all options for editing blocks.'),
    ),
    'stanford personal manage pages' => array(
      'title' => t('Manage Pages'),
      'description' => t('Access the manage pages interface.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_personal_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if (!user_access('stanford personal use full block')) {
    $form['regions']['#type'] = 'hidden';
    $form['visibility']['node_type']['#type'] = 'hidden';
    $form['visibility']['role']['#type'] = 'hidden';
    $form['visibility']['user']['#type'] = 'hidden';
    $form['settings']['css_class']['#type'] = 'hidden';
    //"visiblity" - ya rly.
    $form['visiblity']['context_respect']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_personal_form_bean_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('stanford personal use full block')) {
    $form['revision']['#type'] = 'hidden';
    $form['actions']['delete']['#type'] = 'hidden';
  }
  $form['#validate'][] = 'stanford_personal_bean_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_personal_form_stanford_page_node_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('stanford personal use full block')) {
    $form['options']['promote']['#type'] = 'hidden';
    $form['options']['sticky']['#type'] = 'hidden';
  }

  // hide the menu form, we'll default to main-menu later 
  // only do this if the user is not an administrator
  if (!user_access('administer menu')) {
    $form['menu']['#type'] = 'hidden';
  }

  // add submit functions to form
  $form['#submit'][] = 'stanford_personal_stanford_page_node_form_submit';
}

/**
 * Tasks to run when editing a form
 */

function stanford_personal_stanford_page_node_form_submit($form, &$form_state) {
 
  // Set the default menu to main-menu and the link title to the page title
  // Only do this if the user can't administer menus 
  if (!user_access('administer menu')) {
    $form_state['values']['menu']['link_title'] = $form_state['values']['title'];
    $form_state['values']['menu']['enabled'] = 1;
    $form_state['values']['menu']['parent'] = 'main-menu:0';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_personal_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {
  if (!user_access('stanford personal use full block')) {
    $form['site_information']['site_slogan']['#type'] = 'hidden';
    $form['error_page']['#type'] = 'hidden';
    $form['front_page']['#type'] = 'hidden';
  }
}

function stanford_personal_manage_pages_form($form_state) {

  // retrieve the data for the main-menu menu
  $tree = menu_tree_all_data('main-menu');

  $form['add_page_link'] = array(
    '#markup' => l('Add a new page','node/add/stanford-page', array('attributes' => array('class' => array('button')))),
    '#weight' => '-50',
    '#class'  => 'button',
  );

  // Identify that the elements in 'menu_items' are a collection, to
  // prevent Form API from flattening the array when submitted.
  $form['menu_items']['#tree'] = TRUE;

  // Iterate through each menu item
  foreach ($tree as $item) {

    // Create a form entry for this item.
    //
    // Each entry will be an array using the the unique id for that item as
    // the array key, and an array of table row data as the value.

    $link = $item['link'];

    $mlid = 'mlid:' . $link['mlid'];
    $path = $link['link_path'];

    $is_home = FALSE;

    if ($path == '<front>') {
      $path = variable_get('site_frontpage');
      $is_home = TRUE;
    }

    $nid = _stanford_personal_get_nid($link);
    $node = FALSE;

    if ($nid) {
      $node = node_load($nid);
    }

    $operations = array();

    if (!empty($node)) {

      $operations['edit'] = array(
        '#type' => 'link',
        '#title' => t('edit'),
        '#href' => $path . '/edit',
      );

      // Add a delete operation, but only if it's not the Home Page
      if (!$is_home) {
        $operations['separator'] = array(
          '#markup' => ' | ',
        );

        $operations['delete'] = array(
          '#type' => 'link',
          '#title' => t('delete'),
          '#href' => url($path . '/delete', array('absolute' => TRUE, 'query' => array('destination' => 'admin/stanford-personal/pages'))),
        );
      }
    } else {
      $operations['empty'] = array(
        '#markup' => 'N/A',
      );
    }

    // checkbox: 
    // disabled if it's HOME
    // disabled if it's not a node
    // checked if it's a node, and it's published
    // unchecked if it's a node, and not published
   
    $enabled_checkbox = array(
        '#type' => 'checkbox',
        '#title' => 'Publish the page',
        '#title_display' => 'invisible',
    );

    if ($is_home) {
      $enabled_checkbox['#disabled'] = 'disabled';
    }

    if (!empty($node)) {
      $enabled_checkbox['#default_value'] = $node->status;
    } else {
      $enabled_checkbox = array('#markup' => 'N/A');
    }

    $form['menu_items'][$link['mlid']] = array(
      '#is_home' => $is_home,

      // We'll use a form element of type '#markup' to display the item name.
      'name' => array(
        '#markup' => l($link['link_title'],$link['link_path']),
      ),

      // Add the enabled checkbox.
      'enabled' => $enabled_checkbox,

      // Add the operations links created earlier.
      'actions' => $operations,

      // The 'weight' field will be manipulated as we move the items around in
      // the table using the tabledrag activity.  We use the 'weight' element
      // defined in Drupal's Form API.
      'weight' => array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $link['weight'],
        '#delta' => 50,
        '#title_display' => 'invisible',
      ),
    );
  }
  // Now we add our submit button, for submitting the form results.
  //
  // The 'actions' wrapper used here isn't strictly necessary for tabledrag,
  // but is included as a Form API recommended practice.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

/**
 * Config form for "Manage Profile" page
 */
function stanford_personal_profile_form($form, &$form_state) {
  return $form;
}

/**
 * Config form for "Manage Blocks" page
 */
function stanford_personal_blocks_form($form, &$form_state) {
  return $form;
}

/**
 * Config form for "Customize Design" page
 */
function stanford_personal_design_form($form, &$form_state) {
  $default_theme = variable_get('theme_default');
  // If you aren't using stanford_light, no soup for you. Also, anybody that don't like Hank Williams, they can kiss our ass.
  if($default_theme !== 'stanford_light') {
    $content = t('You are not using the Stanford Light theme, perhaps because you have switched to Advanced Mode and chose a different theme. Go to !themesettings to configure your theme.', array('!themesettings' => l('the theme settings page', 'admin/appearance/settings')));
    $form['other'] = array(
      '#prefix' => '<p>' . $content . '</p>',
    );
  }
  else {
    $stanford_light_settings = array (
      'toggle_logo' => 0,
      'toggle_name' => 1,
      'toggle_slogan' => 1,
      'toggle_node_user_picture' => 1,
      'toggle_comment_user_picture' => 1,
      'toggle_comment_user_verification' => 1,
      'toggle_favicon' => 1,
      'toggle_main_menu' => 1,
      'toggle_secondary_menu' => 1,
      'default_logo' => 1,
      'logo_path' => '',
      'logo_upload' => '',
      'default_favicon' => 1,
      'favicon_path' => '',
      'favicon_upload' => '',
      'content_order_classes' => '',
      'front_heading_classes' => '',
      'breadcrumb_classes' => '',
      'body_bg_type' => '',
      'body_bg_classes' => '',
      'body_bg_path' => 'public://',
      'body_bg_upload' => '',
      'styles' => 'styles-light',
      'fonts' => 'fonts-sans',
      'red_bar' => 'red-bar',
    );
    $stanford_light_settings = variable_get('theme_stanford_light_settings', $stanford_light_settings);
    $form_state['stanford_light_settings'] = $stanford_light_settings;
    $form['layouts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose Layout'),
    );
    $layout_options = array(
      0 => t('Left Sidebar'),
      1 => t('Right Sidebar'),
      2 => t('Two Sidbars, Profile Right'),
      3 => t('Two Sidebars, Profile Left'),
    );
    $form['layouts']['layout'] = array(
      '#type' => 'radios',
      '#title' => t('Layout'),
      '#options' => $layout_options,
//      '#default_value' => $default_layout,
    );
    $form['styles'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose Style'),
    );
    $style_options = array(
      'styles-light' => t('Light'),
      'styles-dark' => t('Dark'),
      'styles-plain' => t('Plain'),
      'styles-rich' => t('Rich'),
      'styles-bright' => t('Bright'),
      'styles-contrast' => t('High Contrast'),
    );
    $form['styles']['style'] = array(
      '#type' => 'radios',
      '#title' => t('Style'),
      '#options' => $style_options,
      '#default_value' => $stanford_light_settings['styles'],
    );
    $form['fonts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose Fonts'),
    );
    $font_options = array(
      
      'fonts-sans' => t('Sans Serif'),
      'fonts-serif' => t('Serif'),
      'fonts-slab' => t('Slab Serif'),
    );
    $form['fonts']['font'] = array(
      '#type' => 'radios',
      '#title' => t('Font'),
      '#options' => $font_options,
      '#default_value' => $stanford_light_settings['fonts'],
    );
    $form['redbar'] = array(
      '#type' => 'fieldset',
      '#title' => t('Enable Red Bar'),
    );
    $redbar_options = array(
      'red-bar' => t('Show red bar above header'),
      'no-red-bar' => t('Do not show red bar above header'),
    );
    $form['redbar']['red_bar'] = array(
      '#type' => 'radios',
      '#title' => t('Font'),
      '#options' => $redbar_options,
      '#default_value' => $stanford_light_settings['red_bar'],
    );
    $form['logo'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose Logo'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['header_bg_image'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose Header Background Image'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['favicon'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose Favicon'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Design Settings'),
    );

  }
  return $form;
}

/**
 * Config form for "Site Details" page
 */
function stanford_personal_site_details_form($form, &$form_state) {
  $content = t("Your site title and subtitle are displayed in the header of your website. The title is created automatically from your SUNet information when you request your site. You can update them to reflect your personal preferences.");
  $form['site_title'] = array(
      '#type' => 'fieldset',
      '#title' => t('Site Details'),
  );
  $form['site_title']['site_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Site Name'),
      '#default_value' => variable_get('site_name'),
      '#prefix' => '<p>' . $content . '</p>',
      '#required' => TRUE,
  );
  $form['site_title']['site_subtitle'] = array(
      '#type' => 'textfield',
      '#title' => t('Site Subtitle'),
      '#default_value' => variable_get('site_slogan'),
  );
  $form['site_title']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Change Site Name and Subtitle'),
  );
  return $form;
}

/**
 * Config form for "Site Editors" page
 */
function stanford_personal_site_editors_form($form, &$form_state) {
  $content = '<p>' . t("If you would like to have another person edit your website, you can add their SUNet ID here. It is also possible to request a SUNet ID for people who are off campus.") . '</p>';
  $content .= '<p>' . t('!sunetids', array('!sunetids' => l('Learn more about SUNetIDs', 'https://itservices.stanford.edu/service/accounts/sunetids'))) . '</p>';
  $form['site_editors'] = array(
      '#type' => 'fieldset',
      '#title' => t('Site Editors'),
  );
  $form['site_editors']['sunetid'] = array(
      '#type' => 'textfield',
      '#title' => t('SUNetID'),
      '#description' => t('Enter the SUNetID of the user you wish to add as a site editor.'),
      '#prefix' => $content,
      '#required' => TRUE,
  );
  $form['site_editors']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#description' => t('If you wish to specify the user\'s preferred name (instead of sunetid@stanford.edu), enter it here.'),
  );
  $form['site_editors']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email Address'),
      '#description' => t('If you wish to specify an alternate email address (instead of sunetid@stanford.edu), enter it here.'),
  );
  $form['site_editors']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add Site Editor'),
      '#submit' => array('webauth_extras_waau_config_form_submit', 'stanford_personal_site_editors_form_submit'),
      '#validate' => array('webauth_extras_waau_config_form_validate'),
  );
  return $form;
}

/**
 * Config form for "Advanced Mode" page
 */
function stanford_personal_site_settings_advanced_form($form, &$form_state) {
  global $user;
  $account = $user;
  $admin_rid = variable_get('user_admin_role', user_role_load_by_name('administrator')->rid);
  if (!array_key_exists($admin_rid, $account->roles)) {
    $content = t("Advanced mode allows you to use all of Drupal’s powerful functionality, but also makes it possible for you to break your site. If you have taken a Drupal class and would like to experiment with your website, or you are already familiar with Drupal site building, Advanced mode will give you full access to advanced site administration.");
    $form['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Switch to Advanced Mode'),
    );
    $form['advanced']['agree'] = array(
        '#type' => 'checkbox',
        '#title' => t('I understand these risks.'),
        '#prefix' => '<p>' . $content . '</p>',
        '#required' => TRUE,
    );
    $form['advanced']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Switch to Advanced Mode'),
    );
  }   else {
    $content = t("You are currently in Advanced mode. Advanced mode allows you to use all of Drupal’s powerful functionality, but also makes it possible for you to break your site. If you would like to switch back to Basic Mode, with a simpler user interface, click the button below.");
    $form['basic'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced Mode'),
    );
    /**
     *   // Comment out checkbox for switching back to basic for now.
     *   $form['basic']['agree'] = array(
     *     '#type' => 'checkbox',
     *     '#title' => t('I understand these risks.'),
     *     '#required' => TRUE,
     *   );
     *
 */
    $form['basic']['submit'] = array(
        '#type' => 'submit',
        '#prefix' => '<p>' . $content . '</p>',
        '#value' => t('Switch Back to Basic Mode'),
    );
  }
  return $form;
}

/**
 * Submit handler for "Site Details" form.
 */
function stanford_personal_site_details_form_submit($form, &$form_state) {
  // set the site_name variable to the user's entry
  variable_set('site_name', $form_state['values']['site_name']);
  drupal_set_message(t('The site name has been set to @sitename', array('@sitename' => $form_state['values']['site_name'])));
  // set the site_slogan variable to the user's entry
  variable_set('site_slogan', $form_state['values']['site_subtitle']);
  if (empty($form_state['values']['site_subtitle'])) {
    drupal_set_message(t('The site subtitle has been unset.'));
  } else {
    drupal_set_message(t('The site subtitle has been set to @subtitle', array('@subtitle' => $form_state['values']['site_subtitle'])));
  }
}

/**
 * Submit handler for "Site Editors" form.
 */
function stanford_personal_site_editors_form_submit($form, &$form_state) {
  // grap the $role object for the "site owner" role
  $site_owner = user_role_load_by_name('site owner');
  // get the rid, e.g., 7
  $rid = $site_owner->rid;
  // grab the $user object for the user name that was just submitted
  // TODO: see if there's a better way to do this based on return value from webauth_extras_add_user() or webauth_extras_waau_config_form_submit().
  $account = user_load_by_name($form_state['values']['name']);
  // what roles does that user already have? put these into the $roles array
  $roles = $account->roles;
  // add rid 7 into the $roles array
  $roles[$rid] = TRUE;
  // put the modified $roles array into the $account object
  $account->roles = $roles;
  // save the $account object as the user
  user_save($account);
}

/**
 * Sumbit handler for the "Advanced Mode" form.
 */

function stanford_personal_site_settings_advanced_form_submit($form, &$form_state) {
  global $user;
  // grab user object
  $account = $user;
  // grab the rid of the administrator role (e.g., 8); usually this role is named "administrator", so fall back on that
  $admin_rid = variable_get('user_admin_role', user_role_load_by_name('administrator')->rid);
  // what roles does that user already have? put these into the $roles array
  $roles = $account->roles;
  if ($form_state['values']['submit'] == "Switch to Advanced Mode") {
    // add rid 8 into the $roles array
    $roles[$admin_rid] = TRUE;
    // put the modified $roles array into the $account object
    $account->roles = $roles;
    // save the $account object as the user
    user_save($account);
  }   elseif ($form_state['values']['submit'] == "Switch Back to Basic Mode") {
    // remove rid 8 from the $roles array
    unset($roles[$admin_rid]);
    // grab the rid of the "site owner" role
    $site_owner_rid = user_role_load_by_name('site owner')->rid;
    $roles[$site_owner_rid] = TRUE;
    // put the modified $roles array into the $account object
    $account->roles = $roles;
    // save the $account object as the user
    user_save($account);
  }
}

function stanford_personal_design_form_submit($form, &$form_state) {
  $stanford_light_settings = $form_state['stanford_light_settings'];
  $stanford_light_settings['fonts'] = $form_state['values']['font'];
  $stanford_light_settings['styles'] = $form_state['values']['style'];
  $stanford_light_settings['red_bar'] = $form_state['values']['red_bar'];
  variable_set('theme_stanford_light_settings', $stanford_light_settings);
}

/**
 * Config form for "Manage Pages" page
 */
function theme_stanford_personal_manage_pages_form($variables) {
  $form = $variables['form'];
  $output = '';
  $output .= drupal_render($form['add_page_link']);

  // Initialize the variable which will store our table rows.
  $rows = array();

  // Iterate over each element in our $form['menu_items'] array.
  foreach (element_children($form['menu_items']) as $id) {

    // Before we add our 'weight' column to the row, we need to give the
    // element a custom class so that it can be identified in the
    // drupal_add_tabledrag call.
    //
    // This could also have been done during the form declaration by adding
    // '#attributes' => array('class' => 'menu-item-weight'),
    // directy to the 'weight' element in stanford_personal_manage_pages_form().
    $form['menu_items'][$id]['weight']['#attributes']['class'] = array('menu-item-weight');

    // We don't want the home page to be draggable
    if ($form['menu_items'][$id]['#is_home']) {
      $class = '';
    } else {
      $class = 'draggable';
    }

    // We are now ready to add each element of our $form data to the $rows
    // array, so that they end up as individual table cells when rendered
    // in the final table.  We run each element through the drupal_render()
    // function to generate the final html markup for that element.
    $rows[] = array(
      'data' => array(
        // Add our 'page' column.
        drupal_render($form['menu_items'][$id]['name']),
        // Add our 'enabled' column.
        drupal_render($form['menu_items'][$id]['enabled']),
        // Add our 'actions' column.
        drupal_render($form['menu_items'][$id]['actions']),
        // Add our 'weight' column.
        drupal_render($form['menu_items'][$id]['weight']),
      ),
      // To support the tabledrag behaviour, we need to assign each row of the
      // table a class attribute of 'draggable'. This will add the 'draggable'
      // class to the <tr> element for that row when the final table is
      // rendered.
      'class' => array($class),
    );
  }
 // We now define the table header values.  Ensure that the 'header' count
  // matches the final column count for your table.
  $header = array(t('Page'), t('Enabled'), t('Actions'), t('Weight'));

  // We also need to pass the drupal_add_tabledrag() function an id which will
  // be used to identify the <table> element containing our tabledrag form.
  // Because an element's 'id' should be unique on a page, make sure the value
  // you select is NOT the same as the form ID used in your form declaration.
  $table_id = 'menu-items-table';

  // We can render our tabledrag table for output.
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));

  // And then render any remaining form elements (such as our submit button).
  $output .= drupal_render_children($form);

  // We now call the drupal_add_tabledrag() function in order to add the
  // tabledrag.js goodness onto our page.
  //
  // For a basic sortable table, we need to pass it:
  // - the $table_id of our <table> element,
  // - the $action to be performed on our form items ('order'),
  // - a string describing where $action should be applied ('siblings'),
  // - and the class of the element containing our 'weight' element.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'menu-item-weight');

  return $output;
}
/**
 * Submit callback for the stanford_personal_manage_pages_form form.
 *
 * Updates the 'weight' column for each element in our table, taking into
 * account that item's new order after the drag and drop actions have been
 * performed.
 *
 * @ingroup stanford_personal
 */
function stanford_personal_manage_pages_form_submit($form, &$form_state) {
  // Because the form elements were keyed with the item ids from the database,
  // we can simply iterate through the submitted values.
  foreach ($form_state['values']['menu_items'] as $id => $item) {
    // publish or unpublish nodes as needed
    // TODO: would be nice not to save the node if the status hasn't changed
    if (isset($item['enabled'])) {
      $nid = _stanford_personal_get_nid(menu_link_load($id));
      $node = node_load($nid);
      if ($item['enabled']) {
        node_publish_action($node);
        node_save($node);
      } else {
        node_unpublish_action($node);
        node_save($node);
      }
    }

    db_query(
      "UPDATE {menu_links} SET weight = :weight WHERE mlid = :id",
      array(':weight' => $item['weight'], ':id' => $id)
    );

  }

  drupal_set_message(t('The changes have been saved.'));

  // Clear the menu cache or the changes won't be reflected in the UI
  menu_cache_clear('main-menu');
}

/**
 * From: https://drupal.org/project/menu_view_unpublished
 * Allow menu items to show in the admin interface, even if they are unpublished
 */

function stanford_personal_query_node_access_alter(QueryAlterableInterface $query) {
  if (user_access('stanford personal manage pages') && (current_path() == 'admin/stanford-personal/pages')) {
    $c = &$query->conditions();
    // Remove the status condition if we suspect this query originates from
    // menu_tree_check_access().
    if (count($c) == 3 &&
      is_string($c[0]['field']) && $c[0]['field'] == 'n.status' &&
      is_string($c[1]['field']) && $c[1]['field'] == 'n.nid' && $c[1]['operator'] == 'IN') {
      unset($c[0]);
    }
  }
}

/**
 * Helper functions
 */

function _stanford_personal_get_nid($link) {

  if ($link['router_path'] == 'node/%') {
    $nid = substr($link['link_path'], 5);
    if (is_numeric($nid)) {
      return $nid;
    }
  }
  elseif ($link['link_path'] == '<front>') {
    $nid = substr(variable_get('site_frontpage'), 5);
    if (is_numeric($nid)) {
      return $nid;
    }
  }

  return FALSE;
}
